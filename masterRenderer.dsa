var oContentMgr = App.getContentMgr();
var nTotalNumberOfInstances = App.scriptArgs[0]/* ? App.scriptArgs[0] : 1*/;
oContentMgr.openFile('C:/assets/templates/masterTemplate.duf', false);

if (nTotalNumberOfInstances) {
	var nInstanceNumber = App.instanceName()/* ? App.instanceName() : 1*/;
	var oInputDirectory = new DzDir('C:/input');
	var aSubjects = oInputDirectory.getFilesFromDir(['*_subject.duf'], true);
	var aAnimations = oInputDirectory.getFilesFromDir(['*_animation.duf'], true);
	var aGear = oInputDirectory.getFilesFromDir(['*_gear.duf'], true);

	var oRenderMgr = App.getRenderMgr();
	var oIrayOptions = oRenderMgr.getRenderElementObjects()[1];
	var oEnvironmentOptionsPropertyGroups = oRenderMgr.getRenderElementObjects()[3].getPropertyGroups();
	var oRenderOptions = oRenderMgr.getRenderOptions();
	var oViewport = MainWindow.getViewportMgr().getActiveViewport().get3DViewport();
	var oActiveCanvasProperty = oIrayOptions.getPropertyGroups().findProperty('Active Canvas');
	var oDrawGroundProperty = oEnvironmentOptionsPropertyGroups.findProperty("Draw Ground");
	var oEnvironmentModeProperty = oEnvironmentOptionsPropertyGroups.findProperty("Environment Mode");
	var oSceneHelper = new DzSceneHelper();
	var nAngles = 16;
	var nFrameRate = 30;
	var nDEGREES_IN_CIRCLE = 360;
	var nDegrees = nDEGREES_IN_CIRCLE / nAngles;
	var nDAZ_TICKS = 4800;
	var nTicksPerFrame = nDAZ_TICKS / nFrameRate;
	var oRoot = Scene.findNodeByLabel('root');
	var oShadowPlane = Scene.findNodeByLabel('shadowPlane');
	var bOverwriteExistingImages = false;

	/*********************************************************************/
	function getName(sFileName) // Obtain the desired name out of a filepath or filename.
	{
		return sFileName.split('/').pop().split('_')[0];
	}
	/*********************************************************************/
	function setMatte(bBool) // Set the Matte Parameter of a subject and its children.
	{
		if (oSubjectMatteParameter) oSubjectMatteParameter.setValue(bBool);

		for (var i = 0; i != aSubjectChildren.length; i++) {
			var oChildMatteParameter = aSubjectChildren[i].findPropertyByLabel('Enable Iray Matte');
			if (oChildMatteParameter) oChildMatteParameter.setValue(bBool);
		}
	}
	/*********************************************************************/
	function renderCore(sName, sAnimationName, bIsGear, bIsShadow) {
		if (aChildPropertyControllers) for (var i = 0; i != aChildPropertyControllers.length; i++) // then for each of the child property controllers...
		{
			/* 
			Use the name of the property in the "Custom" category to find the property to which to link it.
			e.g.,
			BowOnnaStick-StikkbowDrawn
			Default Bolt-Opacity Strength-shaft
			The the first value is the node label. The second value is the property label. The third value is the material name, and is optional.
			The owner of a property usually is a DzNode, but it might be a DzMorph. The DzNode method "findPropertyByLabel" won't work for properties owned by a DzMorph.
			The "findPropertyOnNodeByLabel" method in the DzSceneHelper convenience object must be used to accommodate this scenario.
			*/
			var oChildPropertyController = aChildPropertyControllers[i];
			var aTargetPropertyParameters = oChildPropertyController.name.split("-");
			var oTargetNode = Scene.findNodeByLabel(aTargetPropertyParameters[0]);
			var sTargetPropertyName = aTargetPropertyParameters[1];
			var sTargetMaterial = aTargetPropertyParameters[2];
			var oTarget;
			if (sTargetMaterial) oTarget = oSceneHelper.findPropertyOnMaterialByLabel(sTargetPropertyName, oTargetNode.getObject().getCurrentShape().findMaterial(sTargetMaterial));
			else oTarget = oSceneHelper.findPropertyOnNodeByLabel(sTargetPropertyName, oTargetNode);

			oTarget.linkTo(oChildPropertyController);
		}

		// variables that have to be determined when we start rendering
		var nFramesTotal = Scene.getPlayRange().end / nTicksPerFrame;

		for (var nAngle = 0; nAngle != nDEGREES_IN_CIRCLE; nAngle = nAngle + nDegrees) // Loop through each angle...
		{
			var nOutputAngle = 90 - nAngle;
			if (nOutputAngle <= -180) nOutputAngle += 360;

			for (var nFrame = 0; nFrame <= nFramesTotal; nFrame++) // Loop through each frame...
			{
				// subtract 1 from the instance number to make it 0 based.
				// if we subtract the 0-based instanced number from the frame,
				// then check if that number is divisible by the total number of instances,
				// we'll find out if the current instance should render the current frame.
				if ((nFrame - (nInstanceNumber - 1)) % nTotalNumberOfInstances != 0) continue;

				var sNameSuffix = '';
				var sAngleSuffix = '';
				if (bIsGear) sNameSuffix = '_gear';
				if (bIsShadow) sNameSuffix += '_shadow';
				if (sAnimationName !== 'default') sAngleSuffix = '_' + nOutputAngle;

				var sFinalFilePath = 'C:/output/' + sName + sNameSuffix + '/' + sAnimationName + sAngleSuffix + '_' + ("000" + nFrame).slice(-3) + '.png';

				// If the image we're going to make already exists, skip it if we have flagged as such.
				if (oInputDirectory.exists(sFinalFilePath) && !bOverwriteExistingImages) continue;
				oRenderOptions.renderImgFilename = sFinalFilePath; // Set the filepath.

				Scene.setFrame(nFrame);
				oRoot.getYRotControl().setValue(nAngle); // Do this every frame, or else it will interpolate.

				if (bIsShadow) {
					oEnvironmentModeProperty.setValue(3); // Scene Only
					oDrawGroundProperty.setValue(true);
					oShadowPlane.setVisible(true);
					oActiveCanvasProperty.setValue(0);
					if (bIsGear) setMatte(true);
				}
				else {
					oEnvironmentModeProperty.setValue(2); // Sun-Sky Only
					oDrawGroundProperty.setValue(false);
					oShadowPlane.setVisible(false);
					setMatte(false);
					if (bIsGear) oActiveCanvasProperty.setValue(1);
				}

				while (backgroundProgressIsActive()) processEvents();		// Wait for everything else to finish first, specifically the mesh smoother, then render.
				oRenderMgr.doRender();

				var oCanvasDirectory = DzDir(sFinalFilePath.replace('.png', '_canvases'));

				if (oCanvasDirectory.exists())  // If canvases were made, delete all of them, then delete the canvas folder.
				{
					var aCanvases = oCanvasDirectory.getFilesFromDir(['*.exr'], true);
					for (var i = 0; i != aCanvases.length; i++) oCanvasDirectory.remove(aCanvases[i]);
					oCanvasDirectory.rmdir();
				}

				// Looping through all pixels of the output image would be much slower than checking the file size.
				if (DzFileInfo(sFinalFilePath).size() == 4181) print('WARNING: ' + sFinalFilePath + ' is 4181 bytes. It is likely a blank image.');
			}
		}

		// TODO: Would it be faster to change environment settings every frame to render the shadow,
		// instead of reloading all animations?
		if (!bIsShadow) renderCore(sName, sAnimationName, bIsGear, true);
	}



	if (nTotalNumberOfInstances > nInstanceNumber) {

		sleep(5000); // This prevents a postgre database error when opening multiple instances of Daz quickly

		App.showURL('file:///C:/assets/DAZScripts/masterRenderer.lnk');
	}
	/*********************************************************************

								RENDER LOOPS

	*********************************************************************/
	for (var i = 0; i != aSubjects.length; i++) // For each subject...
	{
		oContentMgr.openFile(aSubjects[i], true);		// Merge in a subject, and get its name.
		var sSubjectName = getName(aSubjects[i]);

		var oSubject = Scene.findNodeByLabel('subject');		// Set up the subject.
		var aSubjectChildren = oSubject.getNodeChildren(true);
		var oSubjectMatteParameter = oSubject.findPropertyByLabel('Enable Iray Matte');
		var oCustomPropertyGroup = oSubject.getPropertyGroups().findChild("Custom");
		var aChildPropertyControllers;
		if (oCustomPropertyGroup) aChildPropertyControllers = oCustomPropertyGroup.getAllProperties();

		oRoot.addNodeChild(oSubject, true);

		if (!aAnimations.length) renderCore(sSubjectName, 'default', false, false);

		else for (var j = 0; j != aAnimations.length; j++) // For each animation...
		{
			// First noticed in Daz Studio 4.23, the prompt asking to expand the animation range when importing an animation
			// that contains more frames than the current playrange is no longer being suppressed by the "-noPrompt" launch flag.
			// The following workaround opens the animation file into a JSON object, reads the frame range, then sets the playrange.
			// The animation file must not be compressed. We are also making the assuming that the first quantity of keys found in that JSON
			// is the total number of frames in the animation. This won't work on animations that were manually tweaked.
			// We could loop through all keys and use the highest frame number, but there might be a performance overhead.
			// In a random sample, the key we needed was at object #54 out of 810. (would be ~16x slower to loop through all)

			var oFile = new DzFile(aAnimations[j]);

			oFile.open(DzFile.ReadOnly);
			var oJSON = JSON.parse(oFile.read()).scene.animations;
			oFile.close();

			for (var i = 0; i < oJSON.length; i++) {

				var nNumberOfFrames = oJSON[i].keys.length;
			
				if (nNumberOfFrames > 1) {

					// Subtract 1 here to make it 0-based
					Scene.setAnimRange(DzTimeRange(0, (nNumberOfFrames - 1) * nTicksPerFrame));
			
					break;
				}
			}

			oContentMgr.openFile(aAnimations[j], true); // only the subject can be selected when we merge in an animation

			var sAnimationName = getName(aAnimations[j]);

			if (!aGear.length) renderCore(sSubjectName, sAnimationName, false, false);

			else for (var k = 0; k != aGear.length; k++) // If there are gears, for each gear...
			{
				oContentMgr.openFile(aGear[k], true);
				var sGearName = getName(aGear[k]);
				var oGear = Scene.findNodeByLabel('gear');

				var aGearChildren = oGear.getNodeChildren(false);

				oIrayOptions.addNodeToNodeList('visibleNodes', oGear); // Add the gear to the canvas.

				for (var ii = 0; ii != aGearChildren.length; ii++) oIrayOptions.addNodeToNodeList('visibleNodes', aGearChildren[ii]); // Add all gear children to the canvas as well.

				renderCore(sSubjectName + '_' + sGearName, sAnimationName, true, false);

				Scene.removeNode(oGear);
			}
			// Custom parameter keys don't always exist. They have to be manually cleared after each animation
			if (aChildPropertyControllers) for (var i = 0; i != aChildPropertyControllers.length; i++) aChildPropertyControllers[i].deleteAllKeys();

			Scene.setAnimRange(DzTimeRange(0, 0));
		}
		Scene.removeNode(oSubject);
	}
	App.showURL('file:///C:/assets/DAZScripts/makeSpritesheets.ps1');
}